color choice - good contrast with varied color palette, all selection shade each tone betwen 10-30%, depending on the initial darkness of the colour. Strokes either white or black depending on colour of region.

RGB to Hex converter used online - https://rgb.to/33,63,33

Hex color lighener/darkener used to create the light shades - https://www.cssfontstack.com/oldsites/hexcolortool/

learning jQuery
learning about colour matching/contrasting
making code efficient
learning css flexbox 



functions

hover map legend - utilises jquery hover function so that a hoveron, hoveroff state can really easily be achieved. Hovering on map interactively lights up the map for quick recognition. Transitions used for smooth effects

hover map - again, uses j query hover function. Use of this key word to target the specific province (element) in the region (nodelist) using forEach loop. Gives the appearance that the user is focussed on the specific region, then further feedback on which province their mouse is hovering on. 

hover map legend function and hover map function are both called 15 times each. Trying to figure out way to store region data in object and then use for loop to call all the functions within a loop

Refactored code so that regions were put into objects so I could call a loop on the hover function. Bracket notation used for object property so that I can pass a changing variable into it (from for loop)

tooltip - uses node list and this keyword to generate the name in the tooltip. This refers to the specific province that is being hovered, so $(".tooltip").text(this.id) updates the text inside the tool tip with the id of the province. mousemove function is used to track the x and y coord of the mouse, then an offset is applied and used to dynamically position the tooltip relative to mouse position. These offsets coupled with the x and y coordinates then dynamically changes the top and left properties of the position: fixed tooltip, hence it can change position

Close Modal -  used jQuery click function to open modal, then used another jQuery click function to close modal if the map container was clicked. Closing the modal if clicking on the overlay was more tricky, because the modal window is inside the modal overlay div. So, I used window.onclick function to generate and event (e), then targetted the specific class of "modalFlexContainer" and "closeModalButton" to be clicked to ensure that the box can be close this way. Also added escape key as option to close modal.

In an event, this refers to the element that received the event.